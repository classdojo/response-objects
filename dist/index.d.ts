export interface BaseResponseObject<T> {
    body: T;
    status: number;
    headers?: object;
}
export interface ResponseObject<T> extends BaseResponseObject<T> {
    statusCode: number;
    toJSON(): BaseResponseObject<T>;
    toString(): string;
}
export interface ErrorResponseObject<T> extends ResponseObject<T>, Error {
}
export declare function Continue<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function SwitchingProtocols<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function Processing<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function OK<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function Created<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function Accepted<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function NonAuthoritativeInformation<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function NoContent<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function ResetContent<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function PartialContent<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function MultiStatus<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function AlreadyReported<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function IMUsed<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function MultipleChoices<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function MovedPermanently<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function Found<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function SeeOther<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function NotModified<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function UseProxy<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function TemporaryRedirect<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function PermanentRedirect<T>(body?: T, headers?: object): ResponseObject<T>;
export declare function BadRequest<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function Unauthorized<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function PaymentRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function Forbidden<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function NotFound<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function MethodNotAllowed<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function NotAcceptable<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function ProxyAuthenticationRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function RequestTimeout<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function Conflict<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function Gone<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function LengthRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function PreconditionFailed<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function PayloadTooLarge<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function URITooLong<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function UnsupportedMediaType<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function RangeNotSatisfiable<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function ExpectationFailed<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function MisdirectedRequest<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function UnprocessableEntity<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function Locked<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function FailedDependency<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function UnorderedCollection<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function UpgradeRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function PreconditionRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function TooManyRequests<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function RequestHeaderFieldsTooLarge<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function UnavailableForLegalReasons<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function InternalServerError<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function NotImplemented<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function BadGateway<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function ServiceUnavailable<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function GatewayTimeout<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function HTTPVersionNotSupported<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function VariantAlsoNegotiates<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function InsufficientStorage<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function LoopDetected<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function BandwidthLimitExceeded<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function NotExtended<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare function NetworkAuthenticationRequired<T>(body?: T, headers?: object): ErrorResponseObject<T>;
export declare const Ok: typeof OK;
declare const _default: (<T>(code: number, body: T, headers?: any) => ResponseObject<T>) & {
    Continue: typeof Continue;
    SwitchingProtocols: typeof SwitchingProtocols;
    Processing: typeof Processing;
    OK: typeof OK;
    Created: typeof Created;
    Accepted: typeof Accepted;
    NonAuthoritativeInformation: typeof NonAuthoritativeInformation;
    NoContent: typeof NoContent;
    ResetContent: typeof ResetContent;
    PartialContent: typeof PartialContent;
    MultiStatus: typeof MultiStatus;
    AlreadyReported: typeof AlreadyReported;
    IMUsed: typeof IMUsed;
    MultipleChoices: typeof MultipleChoices;
    MovedPermanently: typeof MovedPermanently;
    Found: typeof Found;
    SeeOther: typeof SeeOther;
    NotModified: typeof NotModified;
    UseProxy: typeof UseProxy;
    TemporaryRedirect: typeof TemporaryRedirect;
    PermanentRedirect: typeof PermanentRedirect;
    BadRequest: typeof BadRequest;
    Unauthorized: typeof Unauthorized;
    PaymentRequired: typeof PaymentRequired;
    Forbidden: typeof Forbidden;
    NotFound: typeof NotFound;
    MethodNotAllowed: typeof MethodNotAllowed;
    NotAcceptable: typeof NotAcceptable;
    ProxyAuthenticationRequired: typeof ProxyAuthenticationRequired;
    RequestTimeout: typeof RequestTimeout;
    Conflict: typeof Conflict;
    Gone: typeof Gone;
    LengthRequired: typeof LengthRequired;
    PreconditionFailed: typeof PreconditionFailed;
    PayloadTooLarge: typeof PayloadTooLarge;
    URITooLong: typeof URITooLong;
    UnsupportedMediaType: typeof UnsupportedMediaType;
    RangeNotSatisfiable: typeof RangeNotSatisfiable;
    ExpectationFailed: typeof ExpectationFailed;
    MisdirectedRequest: typeof MisdirectedRequest;
    UnprocessableEntity: typeof UnprocessableEntity;
    Locked: typeof Locked;
    FailedDependency: typeof FailedDependency;
    UnorderedCollection: typeof UnorderedCollection;
    UpgradeRequired: typeof UpgradeRequired;
    PreconditionRequired: typeof PreconditionRequired;
    TooManyRequests: typeof TooManyRequests;
    RequestHeaderFieldsTooLarge: typeof RequestHeaderFieldsTooLarge;
    UnavailableForLegalReasons: typeof UnavailableForLegalReasons;
    InternalServerError: typeof InternalServerError;
    NotImplemented: typeof NotImplemented;
    BadGateway: typeof BadGateway;
    ServiceUnavailable: typeof ServiceUnavailable;
    GatewayTimeout: typeof GatewayTimeout;
    HTTPVersionNotSupported: typeof HTTPVersionNotSupported;
    VariantAlsoNegotiates: typeof VariantAlsoNegotiates;
    InsufficientStorage: typeof InsufficientStorage;
    LoopDetected: typeof LoopDetected;
    BandwidthLimitExceeded: typeof BandwidthLimitExceeded;
    NotExtended: typeof NotExtended;
    NetworkAuthenticationRequired: typeof NetworkAuthenticationRequired;
    Ok: typeof OK;
};
export default _default;
